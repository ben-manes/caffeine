import static org.gradle.api.tasks.PathSensitivity.RELATIVE
import org.gradle.plugins.ide.eclipse.model.SourceFolder

apply from: "${rootDir}/gradle/jmh.gradle"
apply from: "${projectDir}/testing.gradle"

sourceSets {
  javaPoet {
    java.srcDir 'src/javaPoet/java'
  }
  codeGen {
    java.srcDir layout.buildDirectory.dir('generated-sources/local')
    java.srcDir layout.buildDirectory.dir('generated-sources/nodes')
  }
}

configurations {
  javaAgent
}

idea.module {
  scopes.PROVIDED.plus += [ configurations.javaPoetCompileClasspath ]
}

eclipse.classpath.file.whenMerged {
  entries.findAll { it instanceof SourceFolder && it.output == 'bin/codeGen' }*.output = 'bin/main'
}

plugins.withType(EclipsePlugin).configureEach {
  project.eclipse.classpath.plusConfigurations += [ configurations.javaPoetCompileClasspath ]
}

dependencies {
  api libraries.checkerAnnotations
  api libraries.errorproneAnnotations

  testImplementation libraries.joor
  testImplementation libraries.ycsb
  testImplementation libraries.guava
  testImplementation libraries.picocli
  testImplementation libraries.fastutil
  testImplementation testLibraries.jctools
  testImplementation testLibraries.lincheck
  testImplementation libraries.commonsLang3
  testImplementation testLibraries.slf4jTest
  testImplementation testLibraries.guavaTestLib
  testImplementation testLibraries.commonsCollectionsTests
  testImplementation testLibraries.eclipseCollectionsTestLib

  javaAgent libraries.jamm

  jmh libraries.jamm
  jmh libraries.guava
  jmh libraries.tcache
  jmh libraries.cache2k
  jmh libraries.ehcache3
  jmh libraries.fastutil
  jmh libraries.slf4jNop
  jmh libraries.coherence
  jmh libraries.hazelcast
  jmh libraries.flipTables
  jmh libraries.jackrabbit
  jmh libraries.expiringMap
  jmh sourceSets.codeGen.output
  jmh libraries.concurrentlinkedhashmap

  javaPoetImplementation libraries.guava
  javaPoetImplementation libraries.javapoet
  javaPoetImplementation libraries.commonsLang3
  javaPoetImplementation libraries.googleJavaFormat
}

tasks.named('compileCodeGenJava').configure {
  classpath = sourceSets.main.runtimeClasspath + sourceSets.main.output
  dependsOn compileJava
  options.debug = false
}

tasks.named('jar').configure {
  from sourceSets.main.output + sourceSets.codeGen.output
  dependsOn compileCodeGenJava
  bundle.bnd(
    'Bundle-SymbolicName': 'com.github.ben-manes.caffeine',
    'Import-Package': '',
    'Export-Package': [
      'com.github.benmanes.caffeine',
      'com.github.benmanes.caffeine.cache',
      'com.github.benmanes.caffeine.cache.stats'].join(','),
    'Automatic-Module-Name': 'com.github.benmanes.caffeine')
}

def generateLocalCaches = tasks.register('generateLocalCaches', JavaExec) {
  mainClass = 'com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator'
  outputs.dir(layout.buildDirectory.dir('generated-sources/local'))
    .withPropertyName('outputDir')
  inputs.files(sourceSets.javaPoet.output)
    .withPropertyName('javaPoetOutput')
    .withPathSensitivity(RELATIVE)
  classpath = sourceSets.javaPoet.runtimeClasspath
  args 'build/generated-sources/local'
  dependsOn compileJavaPoetJava
  outputs.cacheIf { true }
}

def generateNodes = tasks.register('generateNodes', JavaExec) {
  mainClass = 'com.github.benmanes.caffeine.cache.NodeFactoryGenerator'
  outputs.dir(layout.buildDirectory.dir('generated-sources/nodes'))
    .withPropertyName('outputDir')
  inputs.files(sourceSets.javaPoet.output)
    .withPropertyName('javaPoetOutput')
    .withPathSensitivity(RELATIVE)
  classpath = sourceSets.javaPoet.runtimeClasspath
  args 'build/generated-sources/nodes'
  dependsOn compileJavaPoetJava
  outputs.cacheIf { true }
}

tasks.named('compileJavaPoetJava').configure {
  finalizedBy generateLocalCaches, generateNodes
}
tasks.named('compileJava').configure {
  dependsOn generateLocalCaches, generateNodes
  finalizedBy compileCodeGenJava
  options.errorprone.disable('CheckReturnValue')
}
tasks.named('compileTestJava').configure {
  dependsOn jar, compileCodeGenJava
  options.errorprone.disable('CheckReturnValue')
}
tasks.named('sourcesJar').configure {
  dependsOn generateLocalCaches, generateNodes
}
tasks.javadoc.mustRunAfter(compileCodeGenJava)

tasks.withType(Test).configureEach {
  classpath += sourceSets.codeGen.runtimeClasspath
}

tasks.named('forbiddenApisMain').configure {
  bundledSignatures += 'jdk-deprecated-18'
  bundledSignatures -= 'jdk-deprecated'
}
tasks.named('forbiddenApisCodeGen').configure {
  classpath = sourceSets.main.output + sourceSets.codeGen.output
}
tasks.named('forbiddenApisJmh').configure {
  bundledSignatures -= ['jdk-deprecated', 'jdk-internal',
    'jdk-non-portable', 'jdk-unsafe', 'jdk-system-out']
  bundledSignatures += 'jdk-deprecated-18'
}
tasks.named('forbiddenApisTest').configure {
  bundledSignatures -= ['jdk-deprecated', 'jdk-reflection',
    'jdk-internal', 'jdk-non-portable', 'jdk-system-out', 'jdk-unsafe']
  bundledSignatures += 'jdk-deprecated-18'
}

tasks.register('memoryOverhead', JavaExec) {
  group = 'Benchmarks'
  description = 'Evaluates cache overhead'
  classpath sourceSets.jmh.runtimeClasspath
  classpath sourceSets.codeGen.runtimeClasspath
  mainClass = 'com.github.benmanes.caffeine.cache.MemoryBenchmark'
  jvmArgs += [
    '--add-opens', 'java.base/java.util.concurrent.atomic=ALL-UNNAMED',
    '--add-opens', 'java.base/java.util.concurrent.locks=ALL-UNNAMED',
    '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED',
    '--add-opens', 'java.base/java.lang.ref=ALL-UNNAMED',
    '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
    '--add-opens', 'java.base/java.util=ALL-UNNAMED',
    "-javaagent:${configurations.javaAgent.singleFile}",
  ]
}
