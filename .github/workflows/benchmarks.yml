name: benchmarks
permissions: read-all
on: [ push, pull_request ]

env:
  GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
  MAX_JVM: 19
  EA_JVM: 20

jobs:
  benchmarks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 11, 19, 20, GraalVM ]
    env:
      JAVA_VERSION: ${{ matrix.java }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ebacdc22ef6c2cfb85ee5ded8f2e640f4c776dd5
        with:
          egress-policy: audit
      - uses: actions/checkout@v3
      - name: Compute JMH Benchmark
        uses: ./.github/actions/run-gradle
        with:
          java: ${{ matrix.java }}
          token: ${{ secrets.GITHUB_TOKEN }}
          early-access: ${{ matrix.java == env.EA_JVM }}
          arguments: >
            caffeine:jmh --no-daemon
            -PincludePattern=ComputeBenchmark
            -PbenchmarkParameters=computeType=Caffeine,Guava,ConcurrentHashMap
      - name: Upload Compute JMH Results to Gist
        uses: exuanbo/actions-deploy-gist@v1
        if: >
          github.event_name == 'push'
          && endsWith(github.ref, github.event.repository.default_branch)
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gist_description: Compute JMH Results
          gist_id: 511298014cc5629cbc5e57f09fd4c430
          file_path: ./caffeine/build/reports/jmh/results.json
          gist_file_name: compute_results_${{ matrix.java }}.json
      - name: Get/Put JMH Benchmark
        uses: ./.github/actions/run-gradle
        with:
          java: ${{ matrix.java }}
          token: ${{ secrets.GITHUB_TOKEN }}
          early-access: ${{ matrix.java == env.EA_JVM }}
          arguments: >
            caffeine:jmh --no-daemon
            -PincludePattern=GetPutBenchmark
            -PbenchmarkParameters=cacheType=Caffeine,Guava,ConcurrentHashMap
      - name: Upload Get/Put JMH Results to Gist
        uses: exuanbo/actions-deploy-gist@v1
        if: >
          github.event_name == 'push'
          && endsWith(github.ref, github.event.repository.default_branch)
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gist_description: Get/Put JMH Results
          gist_id: b231cf57cf8e144e2247716e777edcf3
          file_path: ./caffeine/build/reports/jmh/results.json
          gist_file_name: getput_results_${{ matrix.java }}.json
      - name: Put/Remove JMH Benchmark
        uses: ./.github/actions/run-gradle
        with:
          java: ${{ matrix.java }}
          token: ${{ secrets.GITHUB_TOKEN }}
          early-access: ${{ matrix.java == env.EA_JVM }}
          arguments: >
            caffeine:jmh --no-daemon
            -PincludePattern=PutRemoveBenchmark
            -PbenchmarkParameters=computeType=Caffeine,Guava,ConcurrentHashMap
      - name: FrequencySketch JMH Benchmark
        uses: ./.github/actions/run-gradle
        with:
          java: ${{ matrix.java }}
          token: ${{ secrets.GITHUB_TOKEN }}
          early-access: ${{ matrix.java == env.EA_JVM }}
          arguments: caffeine:jmh --no-daemon -PincludePattern=FrequencySketchBenchmark
      - name: TimerWheelBenchmark JMH Benchmark
        uses: ./.github/actions/run-gradle
        with:
          java: ${{ matrix.java }}
          token: ${{ secrets.GITHUB_TOKEN }}
          early-access: ${{ matrix.java == env.EA_JVM }}
          arguments: caffeine:jmh --no-daemon -PincludePattern=TimerWheelBenchmark
      - name: Publish JMH benchmarks
        if: >
          matrix.java == env.MAX_JVM
          && github.event_name == 'push'
          && endsWith(github.ref, github.event.repository.default_branch)
        run: |
          {
            echo '#### [Compute](https://jmh.morethan.io/?gists=511298014cc5629cbc5e57f09fd4c430)'
            echo -n 'This benchmark that evaluates the overhead due to locking when the entry is'
            echo -n 'present. The scenarios graphed are all threads retrieving a single entry'
            echo -n '("sameKey") and threads retrieving different keys based on a Zipf distribution'
            echo -n '("spread").'
            echo -e '\n'
            echo '#### [Get/Put](https://jmh.morethan.io/?gists=b231cf57cf8e144e2247716e777edcf3)'
            echo -n 'A benchmark that evaluates the read/write performance of a cache. The cache is'
            echo -n 'pre-populated for a 100% hit rate and a Zipf distribution of keys is used to'
            echo -n 'mimic application usage patterns.'
          } >> $GITHUB_STEP_SUMMARY
