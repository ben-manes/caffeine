name: Run Gradle
description: Sets up Gradle JDKs and runs Gradle
inputs:
  arguments:
    required: false
    description: Gradle arguments
  java:
    required: true
    description: The JDK version
  distribution:
    default: temurin
    required: false
    description: The Java distribution
  cache-encryption-key:
    required: false
    description: A Gradle cache encryption key
  attempt-limit:
    default: '1'
    required: false
    description: Number of attempts
  attempt-delay:
    default: '0'
    required: false
    description: A delay between attempts in seconds
runs:
  using: composite
  steps:
    - name: Setup shell
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install bash
        echo "/opt/homebrew/bin/bash" >> $GITHUB_PATH || \
        echo "/usr/local/bin/bash" >> $GITHUB_PATH
        brew install grep
        echo "/opt/homebrew/opt/grep/libexec/gnubin" >> $GITHUB_PATH || \
        echo "/usr/local/opt/grep/libexec/gnubin" >> $GITHUB_PATH
    - name: Read Gradle JDK toolchain version
      id: gradle_toolchain
      shell: bash
      run: |
        toolchainVersion=$(grep -oP '(?<=^toolchainVersion=).*' gradle/gradle-daemon-jvm.properties)
        echo "version=${toolchainVersion}" >> $GITHUB_OUTPUT
    - name: Set up JDK ${{ steps.gradle_toolchain.outputs.version }}
      uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
      with:
        java-version: ${{ steps.gradle_toolchain.outputs.version }}
        distribution: zulu
    - name: Set up JDK
      uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
      with:
        java-version: ${{ inputs.java }}
        distribution: ${{ inputs.java == '26-ea' && 'temurin' || inputs.distribution == 'temurin' && 'zulu' || inputs.distribution }}
    - name: Prepare JDK toolchain
      id: java_toolchain
      env:
        INPUTS_JAVA: ${{ inputs.java }}
        JDK_EA: ${{ endsWith(inputs.java, '-ea') }}
        INPUTS_DISTRIBUTION: ${{ inputs.java == '26-ea' && 'temurin' || inputs.distribution == 'temurin' && 'zulu' || inputs.distribution }}
      shell: bash
      run: |
        declare -A -r VENDORS=(
          ["zulu"]="Azul"
          ["temurin"]="Adoptium"
          ["graalvm"]="GraalVM Community"
        )
        version="${INPUTS_JAVA%-ea}"
        vendor=${VENDORS["$INPUTS_DISTRIBUTION"]}

        if [[ "$INPUTS_DISTRIBUTION" == "graalvm" ]]; then
          echo "graalvm_home=$JAVA_HOME" >> $GITHUB_OUTPUT
          echo "graalvm=true" >> $GITHUB_OUTPUT
        fi
        echo "distribution=$INPUTS_DISTRIBUTION" >> $GITHUB_OUTPUT
        echo "early_access=$JDK_EA" >> $GITHUB_OUTPUT
        echo "java_home=$JAVA_HOME" >> $GITHUB_OUTPUT
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "vendor=$vendor" >> $GITHUB_OUTPUT
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@748248ddd2a24f49513d8f472f81c3a07d4d50e1 # v4.4.4
      with:
        cache-read-only: false
        add-job-summary: on-failure
        cache-overwrite-existing: true
        gradle-home-cache-strict-match: true
        gradle-home-cache-includes: |
          caches
          notifications
          wrapper/dists
        cache-encryption-key: ${{ inputs.cache-encryption-key }}
    - name: Run ${{ inputs.arguments }}
      if: ${{ inputs.arguments != '' }}
      env:
        INPUTS_ARGUMENTS: ${{ inputs.arguments }}
        INPUTS_ATTEMPT_DELAY: ${{ inputs.attempt-delay }}
        INPUTS_ATTEMPT_LIMIT: ${{ inputs.attempt-limit }}
        JDK_CI: ${{ steps.java_toolchain.outputs.java_home }}
        GRAALVM_HOME: ${{ steps.java_toolchain.outputs.graalvm_home }}
        ORG_GRADLE_PROJECT_graalvm: ${{ steps.java_toolchain.outputs.graalvm }}
        ORG_GRADLE_PROJECT_javaVendor: ${{ steps.java_toolchain.outputs.vendor }}
        ORG_GRADLE_PROJECT_javaVersion: ${{ steps.java_toolchain.outputs.version }}
        ORG_GRADLE_PROJECT_earlyAccess: ${{ steps.java_toolchain.outputs.early_access }}
        ORG_GRADLE_PROJECT_javaDistribution: ${{ steps.java_toolchain.outputs.distribution }}
        ORG_GRADLE_PROJECT_org.gradle.java.installations.auto-download: false
      shell: bash
      run: |
        echo "::add-matcher::.github/problem-matcher.json"
        for ((i=1; i<=$INPUTS_ATTEMPT_LIMIT; i++)); do
          ./gradlew --no-problems-report $(eval echo "$INPUTS_ARGUMENTS" | tr -d '\n') && break
          if [ $i -lt $INPUTS_ATTEMPT_LIMIT ]; then
            echo "Attempt $i failed. Retrying in $INPUTS_ATTEMPT_DELAY seconds..."
            sleep $INPUTS_ATTEMPT_DELAY
          else
            echo "All attempts failed."
            exit 1
          fi
        done
