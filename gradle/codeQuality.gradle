/**
 * Configurations for code quality analysis
 */
import static org.gradle.util.GradleVersion.version

apply plugin: 'de.thetaphi.forbiddenapis'
apply plugin: 'com.github.spotbugs'
apply plugin: 'net.ltgt.errorprone'
apply plugin: 'net.ltgt.nullaway'
apply plugin: 'java-library'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'pmd'

java.toolchain.languageVersion = JavaLanguageVersion.of(System.env.JAVA_VERSION ?: 11)

configurations {
  checkstyleConfig
}

dependencies {
  spotbugsPlugins gradlePlugins.spotbugsContrib
  spotbugsPlugins gradlePlugins.findsecbugs
  checkstyleConfig gradlePlugins.checkstyle
  pmd gradlePlugins.pmd

  errorprone layout.buildDirectory.files('libs/caffeine-local.jar')
  errorprone libraries.errorproneMockito
  errorprone libraries.errorproneSupport
  errorprone libraries.errorproneCore
  errorprone libraries.nullaway
}

// Gradle rewrites ErrorProne's dependency on Caffeine to a project dependency, which then fails.
// Instead we have to download and trick the build to put the jar on the compiler's classpath.
tasks.register('downloadCaffeineLocal') {
  inputs.property('version', '3.1.6')

  def local = file(layout.buildDirectory.file('libs/caffeine-local.jar'))
  outputs.cacheIf { true }
  outputs.file local

  doFirst {
    local.parentFile.mkdirs()
    def url = 'https://repo1.maven.org/maven2/com/github/ben-manes/caffeine/caffeine/' +
      "${inputs.properties.version}/caffeine-${inputs.properties.version}.jar"
    new URL(url).withInputStream{ input -> local.withOutputStream { it << input } }
  }
}

tasks.named('javadoc').configure {
  options.links(
    'https://checkerframework.org/api/',
    'https://errorprone.info/api/latest/',
    'https://lightbend.github.io/config/latest/api/',
    "https://guava.dev/releases/${versions.guava}/api/docs/",
    "https://docs.oracle.com/en/java/javase/${JavaVersion.current().majorVersion}/docs/api/")
}

tasks.named('jar').configure {
  bundle {
    bnd(
      'Bundle-License': 'https://www.apache.org/licenses/LICENSE-2.0', 
      'Build-Jdk-Spec': java.toolchain.languageVersion.get(),
      'Implementation-Title': project.description,
      'Bundle-Description': project.description,
      'Implementation-Version': version,
      '-reproducible': 'true')
    properties.empty()
  }
  metaInf {
    from "${rootDir}/LICENSE"
  }
  inputs.property('version', "${project.version}")
  outputs.cacheIf { true }
}

tasks.withType(AbstractArchiveTask) {
  preserveFileTimestamps = false
  reproducibleFileOrder = true
}

checkstyle {
  showViolations = true
  toolVersion = pluginVersions.checkstyle
  config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')
}

forbiddenApis {
  bundledSignatures += [
    'jdk-deprecated', 'jdk-internal', 'jdk-unsafe',
    'jdk-non-portable', 'jdk-reflection', 'jdk-system-out']
  ignoreSignaturesOfMissingClasses = true
}

spotbugs {
  effort = 'max'
  reportLevel = 'low'
  useJavaToolchains = true
  toolVersion = pluginVersions.spotbugs
  excludeFilter = file("${rootDir}/config/spotbugs/exclude.xml")
}

pmd {
  ruleSets = []
  toolVersion = pluginVersions.pmd
  ruleSetConfig = resources.text.fromFile(file("${rootDir}/config/pmd/rulesSets.xml"))
}

jacoco {
  toolVersion = [version(pluginVersions.jacoco), version(toolVersion)].max().version
}

jacocoTestReport {
  group = 'Coverage reports'
  description = 'Generates a test coverage report for a project'

  reports {
    xml.required = true
    html.required = true
  }
}

def JVM_ARGS_STRONG_ENCAPSULATION = [
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
  '--add-exports', 'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
  '--add-opens',   'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
  '--add-opens',   'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
  '--add-opens',   'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
]

tasks.withType(JavaExec).configureEach {
  jvmArgs JVM_ARGS_STRONG_ENCAPSULATION
  javaLauncher = javaToolchains.launcherFor {
    languageVersion = java.toolchain.languageVersion
  }
}

tasks.withType(JavaCompile).configureEach {
  dependsOn downloadCaffeineLocal

  sourceCompatibility = java.toolchain.languageVersion.get()
  targetCompatibility = java.toolchain.languageVersion.get()
  options.release.set(java.toolchain.languageVersion.get().asInt())

  javaCompiler = javaToolchains.compilerFor {
    languageVersion = java.toolchain.languageVersion
  }

  options.forkOptions.jvmArgs += JVM_ARGS_STRONG_ENCAPSULATION
  options.compilerArgs << [
    '-Xlint:all', '-processing', '-exports', '-auxiliaryclass',
    '-requires-automatic', '-requires-transitive-automatic',
  ].join(',')
  options.compilerArgs += ['-Xmaxerrs', '500', '-Xmaxwarns', '500' ]
  options.encoding = 'UTF-8'
  options.errorprone {
    if (System.env.JDK_EA == 'true') {
      enabled = false
    }

    def enabledChecks = [
      'AssertFalse', 'BuilderReturnThis', 'CatchingUnchecked', 'CheckedExceptionNotThrown',
      'ClassName', 'ComparisonContractViolated', 'CannotMockFinalClass', 'CannotMockFinalMethod',
      'DepAnn', 'EmptyIf', 'EqualsBrokenForNull', 'FieldCanBeLocal', 'FieldCanBeStatic',
      'ForEachIterable', 'FuzzyEqualsShouldNotBeUsedInEqualsMethod', 'FunctionalInterfaceClash',
      'IterablePathParameter', 'LongLiteralLowerCaseSuffix', 'MissingBraces', 'MissingDefault',
      'MixedArrayDimensions', 'MissingDefault', 'NoAllocation', 'PackageLocation',
      'PreferredInterfaceType', 'PreferJavaTimeOverload', 'RedundantThrows', 'RemoveUnusedImports',
      'ReturnsNullCollection', 'SelfAlwaysReturnsThis', 'StronglyTypeByteString',
      'StronglyTypeTime', 'SwitchDefault', 'TimeUnitMismatch', 'TransientMisuse',
      'UnnecessarilyVisible', 'UnnecessaryAnonymousClass', 'UnnecessaryOptionalGet',
      'UnnecessarilyUsedValue', 'UnsafeLocaleUsage', 'UnusedTypeParameter',
      'UsingJsr305CheckReturnValue', 'YodaCondition']
    enabledChecks.each { enable(it) }

    def disabledChecks = [ 'AvoidObjectArrays', 'IsInstanceLambdaUsage',
      'LexicographicalAnnotationListing', 'MissingSummary', 'StaticImport' ]
    disabledChecks.each { disable(it) }

    def errorChecks = [ 'CanIgnoreReturnValueSuggester', 'NullAway' ]
    errorChecks.each { error(it) }

    nullaway {
      if (name.contains('Test') || name.contains('Jmh')) {
        disable()
      }
      annotatedPackages.add('com.github.benmanes.caffeine')
      annotatedPackages.add('com.google.common')
      checkOptionalEmptiness = true
      suggestSuppressions = true
      checkContracts = true
    }
  }
}

tasks.withType(Test).configureEach {
  jvmArgs '-XX:SoftRefLRUPolicyMSPerMB=0'
  if (System.properties.containsKey('debug')) {
    jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
  }
  if (System.env.GRAALVM == 'true') {
    jvmArgs '-XX:+UnlockExperimentalVMOptions', '-Dgraal.ShowConfiguration=info',
      '-XX:+EnableJVMCI', '-XX:+UseJVMCICompiler', '-XX:+EagerJVMCI'
  }
  testLogging {
    events 'skipped', 'failed'
    exceptionFormat 'full'
    showCauses = true
    showExceptions = true
    showStackTraces = true
  }
  if (System.env.JDK_EA == 'true') {
    systemProperty 'net.bytebuddy.experimental', true
    extensions.configure(JacocoTaskExtension) { it.enabled = false }
  }
}

tasks.withType(Checkstyle).configureEach {
  enabled = System.properties.containsKey('checkstyle')
  group = 'Checkstyle'
  reports {
    xml.required = false
    html.required = true
  }
}

tasks.matching { it.name.startsWith('forbiddenApis') }.configureEach {
  notCompatibleWithConfigurationCache(
    "The ${name} task is not compatible with the configuration cache")
  enabled = System.properties.containsKey('forbiddenApis')
}

tasks.matching { it.name.startsWith('spotbugs') }.configureEach {
  enabled = System.properties.containsKey('spotbugs')
  group = 'SpotBugs'
  reports {
    html.required = true
    sarif.required = true
  }
}

tasks.withType(Pmd).configureEach {
  enabled = System.properties.containsKey('pmd')
  group = 'PMD'
  reports {
    xml.required = false
    html.required = true
  }
  consoleOutput = true
}
