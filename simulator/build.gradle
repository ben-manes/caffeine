/** Cache simulator using tracing data and a family of eviction policy options. */
import org.gradle.plugins.ide.eclipse.model.SourceFolder

apply plugin:'application'

eclipse.classpath.file.beforeMerged {
  entries.add(new SourceFolder(
    relativePath("${buildDir}/generated/sources/annotationProcessor/java/main"), 'bin/main'))
}

dependencies {
  implementation project(':caffeine')

  implementation libraries.xz
  implementation libraries.ohc
  implementation libraries.ycsb
  implementation libraries.zstd
  implementation libraries.guava
  implementation libraries.config
  implementation libraries.stream
  implementation libraries.tcache
  implementation libraries.cache2k
  implementation libraries.picocli
  implementation libraries.ehcache3
  implementation libraries.fastutil
  implementation libraries.slf4jJdk
  implementation libraries.coherence
  implementation libraries.commonsIo
  implementation libraries.hazelcast
  implementation libraries.fastfilter
  implementation libraries.flipTables
  implementation libraries.jfreechart
  implementation libraries.expiringMap
  implementation libraries.commonsLang3
  implementation libraries.commonsMath3
  implementation libraries.commonsCompress
  implementation libraries.univocityParsers

  compileOnly libraries.autoValue
  annotationProcessor annotationProcessors.values()
}

forbiddenApis {
  bundledSignatures -= 'jdk-system-out'
  bundledSignatures += 'commons-io-unsafe-2.11.0'
}

tasks.named('compileJava').configure {
  modularity.inferModulePath = false
}

tasks.named('test').configure {
  useJUnitPlatform()
}

tasks.named('jar').configure {
  bundle.bnd(
    'Bundle-SymbolicName': 'com.github.benmanes.caffeine.simulator',
    'Automatic-Module-Name': 'com.github.benmanes.caffeine.simulator')
}

tasks.named('sourcesJar').configure {
  dependsOn(compileJava)
}

tasks.withType(JavaCompile).configureEach {
  options.errorprone {
    nullaway.disable()
  }
}

tasks.withType(Javadoc).configureEach {
  options.addStringOption('Xdoclint:none', '-quiet')
}

application {
  mainClass = 'com.github.benmanes.caffeine.cache.simulator.Simulator'
}

tasks.named('run').configure {
  systemProperties System.properties.findAll {
    it.key.startsWith('caffeine')
  }

  jvmArgs '-XX:+UseParallelGC', '-Xmx4g'
  if (project.hasProperty('jvmArgs')) {
    jvmArgs project.jvmArgs.split(',')
  }
}

class Simulate extends DefaultTask {
  @Input @Optional @Option(option = 'jvmArgs', description = 'The jvm arguments')
  String jvmArguments
  @Input @Option(option = 'maximumSize', description = 'The maximum cache sizes')
  List<String> maximumSizes = []
  @Input @Option(option = 'metric', description = 'The metric to compare')
  String metric = 'Hit Rate'
  @Input @Option(option = 'title', description = 'The chart title')
  String title = ''
  @Input @Option(option = 'theme', description = 'The chart theme')
  String theme = 'light'
  @OutputDirectory
  File reportDir = new File("${project.buildDir}/reports/${name}")

  @TaskAction def run() {
    if (maximumSizes.isEmpty()) {
      def yellow = { "\033[33m${it}\033[0m" }
      def italic = { "\033[3m${it}\033[0m" }
      project.logger.error(
        "\t${yellow('--maximumSize=')}${italic('<Long>[,<Long>...]')} is required")
      return
    }
    def reports = [:]
    maximumSizes = maximumSizes
      .collectMany { it.split(',') as Set }
      .collect { it.replaceAll('_', '').toLong() }
      .sort()
    def baseName = metric.toLowerCase().replaceAll(' ', '_')
    for (def maximumSize : maximumSizes) {
      printf 'Running with maximumSize=%,d...%n ', maximumSize
      def report = "${reportDir}/${baseName}_${maximumSize}.csv"
      reports[maximumSize] = new File(report)
      project.javaexec {
        systemProperties project.tasks.run.systemProperties
        classpath = project.sourceSets.main.runtimeClasspath
        mainClass = project.application.mainClass
        jvmArgs project.tasks.run.allJvmArgs
        if (jvmArguments) {
          jvmArgs jvmArguments.split(',')
        }
        systemProperties [
          'caffeine.simulator.report.format': 'csv',
          'caffeine.simulator.report.output': report,
          'caffeine.simulator.maximum-size': maximumSize,
        ]
      }
    }

    def combinedReport = "${reportDir}/${baseName}.csv"
    project.javaexec {
      mainClass = 'com.github.benmanes.caffeine.cache.simulator.report.csv.CombinedCsvReport'
      classpath = project.sourceSets.main.runtimeClasspath
      reports.each { maximumSize, report ->
        args '--inputFiles', "${maximumSize}=${report}"
      }
      args '--outputFile', combinedReport
      args '--metric', metric
    }

    def chart = "${reportDir}/${baseName}.png"
    project.javaexec {
      mainClass = 'com.github.benmanes.caffeine.cache.simulator.report.csv.PlotCsv'
      classpath = project.sourceSets.main.runtimeClasspath
      args '--inputFile', combinedReport
      args '--outputFile', chart
      args '--metric', metric
      args '--title', title
      args '--theme', theme
    }
  }
}
tasks.register('simulate', Simulate) {
  group 'Application'
  description 'Runs multiple simulations and generates an aggregate report'
  notCompatibleWithConfigurationCache(
    "The ${name} task is not compatible with the configuration cache")
  dependsOn processResources, compileJava
  outputs.upToDateWhen { false }
}

class Rewrite extends DefaultTask {
  @Input @Optional @Option(option = 'inputFiles', description = 'The trace input files')
  List<String> inputFiles
  @Input @Optional @Option(option = 'inputFormat', description = 'The default trace input format')
  String inputFormat
  @Input @Optional @Option(option = 'outputFile', description = 'The trace output file')
  String outputFile
  @Input @Optional @Option(option = 'outputFormat', description = 'The trace output format')
  String outputFormat

  @TaskAction def run() {
    project.javaexec {
      classpath = project.sourceSets.main.runtimeClasspath
      mainClass = 'com.github.benmanes.caffeine.cache.simulator.parser.Rewriter'
      if (inputFiles) {
        args '--inputFiles', inputFiles.join(',')
      }
      if (inputFormat) {
        args '--inputFormat', inputFormat
      }
      if (outputFile) {
        args '--outputFile', outputFile
      }
      if (outputFormat) {
        args '--outputFormat', outputFormat
      }
      if (!inputFiles && !inputFormat && !outputFile && !outputFormat) {
        args '--help'
      }
    }
  }
}
tasks.register('rewrite', Rewrite) {
  group 'Application'
  description 'Rewrite traces into the format used by other simulators'
  notCompatibleWithConfigurationCache(
    "The ${name} task is not compatible with the configuration cache")
  dependsOn processResources, compileJava
  outputs.upToDateWhen { false }
}
